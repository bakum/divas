package ua.divas.view;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 19 13:39:06 EEST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PaySettingsViewRowImpl extends ViewRowImpl {
    
    @Override
    public boolean isAttributeUpdateable(int i) {
        BigDecimal editable = this.getEditable();
        if (editable.intValue()==0) {
            return false;
        } else { 
        return super.isAttributeUpdateable(i);
            }
    }

    @Override
    protected void create(AttributeList attributeList) {
        this.setEditable(new BigDecimal(1));
        //this.setForValidation(new Integer(2));
        super.create(attributeList);
    }
    public static final int ENTITY_PAYSETTINGS = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        Name,
        Fullname,
        Stavka,
        Description,
        Version,
        BaseId,
        Summa,
        Editable,
        BaseOfCalcView1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int FULLNAME = AttributesEnum.Fullname.index();
    public static final int STAVKA = AttributesEnum.Stavka.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int VERSION = AttributesEnum.Version.index();
    public static final int BASEID = AttributesEnum.BaseId.index();
    public static final int SUMMA = AttributesEnum.Summa.index();
    public static final int EDITABLE = AttributesEnum.Editable.index();
    public static final int BASEOFCALCVIEW1 = AttributesEnum.BaseOfCalcView1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public PaySettingsViewRowImpl() {
    }

    /**
     * Gets PaySettings entity object.
     * @return the PaySettings
     */
    public EntityImpl getPaySettings() {
        return (EntityImpl) getEntity(ENTITY_PAYSETTINGS);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public String getId() {
        return (String) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name Id.
     * @param value value to set the ID
     */
    public void setId(String value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for NAME using the alias name Name.
     * @return the NAME
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as attribute value for NAME using the alias name Name.
     * @param value value to set the NAME
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for FULLNAME using the alias name Fullname.
     * @return the FULLNAME
     */
    public String getFullname() {
        return (String) getAttributeInternal(FULLNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for FULLNAME using the alias name Fullname.
     * @param value value to set the FULLNAME
     */
    public void setFullname(String value) {
        setAttributeInternal(FULLNAME, value);
    }

    /**
     * Gets the attribute value for STAVKA using the alias name Stavka.
     * @return the STAVKA
     */
    public BigDecimal getStavka() {
        return (BigDecimal) getAttributeInternal(STAVKA);
    }

    /**
     * Sets <code>value</code> as attribute value for STAVKA using the alias name Stavka.
     * @param value value to set the STAVKA
     */
    public void setStavka(BigDecimal value) {
        setAttributeInternal(STAVKA, value);
    }

    /**
     * Gets the attribute value for DESCRIPTION using the alias name Description.
     * @return the DESCRIPTION
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for DESCRIPTION using the alias name Description.
     * @param value value to set the DESCRIPTION
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for VERSION using the alias name Version.
     * @return the VERSION
     */
    public Timestamp getVersion() {
        return (Timestamp) getAttributeInternal(VERSION);
    }

    /**
     * Sets <code>value</code> as attribute value for VERSION using the alias name Version.
     * @param value value to set the VERSION
     */
    public void setVersion(Timestamp value) {
        setAttributeInternal(VERSION, value);
    }

    /**
     * Gets the attribute value for BASE_ID using the alias name BaseId.
     * @return the BASE_ID
     */
    public String getBaseId() {
        return (String) getAttributeInternal(BASEID);
    }

    /**
     * Sets <code>value</code> as attribute value for BASE_ID using the alias name BaseId.
     * @param value value to set the BASE_ID
     */
    public void setBaseId(String value) {
        setAttributeInternal(BASEID, value);
    }

    /**
     * Gets the attribute value for SUMMA using the alias name Summa.
     * @return the SUMMA
     */
    public BigDecimal getSumma() {
        return (BigDecimal) getAttributeInternal(SUMMA);
    }

    /**
     * Sets <code>value</code> as attribute value for SUMMA using the alias name Summa.
     * @param value value to set the SUMMA
     */
    public void setSumma(BigDecimal value) {
        setAttributeInternal(SUMMA, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Editable.
     * @return the Editable
     */
    public BigDecimal getEditable() {
        return (BigDecimal) getAttributeInternal(EDITABLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Editable.
     * @param value value to set the  Editable
     */
    public void setEditable(BigDecimal value) {
        setAttributeInternal(EDITABLE, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> BaseOfCalcView1.
     */
    public RowSet getBaseOfCalcView1() {
        return (RowSet) getAttributeInternal(BASEOFCALCVIEW1);
    }
}

